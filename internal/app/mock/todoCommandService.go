// Code generated by MockGen. DO NOT EDIT.
// Source: todoCommandService.go
//
// Generated by this command:
//
//	mockgen -source=todoCommandService.go -destination=mock/todoCommandService.go -package=app_mock
//

// Package app_mock is a generated GoMock package.
package app_mock

import (
	reflect "reflect"
	app "todo/internal/app"
	domain "todo/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTodoComandService is a mock of TodoComandService interface.
type MockTodoComandService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoComandServiceMockRecorder
}

// MockTodoComandServiceMockRecorder is the mock recorder for MockTodoComandService.
type MockTodoComandServiceMockRecorder struct {
	mock *MockTodoComandService
}

// NewMockTodoComandService creates a new mock instance.
func NewMockTodoComandService(ctrl *gomock.Controller) *MockTodoComandService {
	mock := &MockTodoComandService{ctrl: ctrl}
	mock.recorder = &MockTodoComandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoComandService) EXPECT() *MockTodoComandServiceMockRecorder {
	return m.recorder
}

// CreateTodoCommand mocks base method.
func (m *MockTodoComandService) CreateTodoCommand(todo app.TodoData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodoCommand", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodoCommand indicates an expected call of CreateTodoCommand.
func (mr *MockTodoComandServiceMockRecorder) CreateTodoCommand(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodoCommand", reflect.TypeOf((*MockTodoComandService)(nil).CreateTodoCommand), todo)
}

// DeleteTodoCommand mocks base method.
func (m *MockTodoComandService) DeleteTodoCommand(todo app.TodoIDData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoCommand", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoCommand indicates an expected call of DeleteTodoCommand.
func (mr *MockTodoComandServiceMockRecorder) DeleteTodoCommand(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoCommand", reflect.TypeOf((*MockTodoComandService)(nil).DeleteTodoCommand), todo)
}

// FindAllCommand mocks base method.
func (m *MockTodoComandService) FindAllCommand() ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCommand")
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCommand indicates an expected call of FindAllCommand.
func (mr *MockTodoComandServiceMockRecorder) FindAllCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCommand", reflect.TypeOf((*MockTodoComandService)(nil).FindAllCommand))
}

// FindByIdCommand mocks base method.
func (m *MockTodoComandService) FindByIdCommand(todo app.TodoIDData) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdCommand", todo)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdCommand indicates an expected call of FindByIdCommand.
func (mr *MockTodoComandServiceMockRecorder) FindByIdCommand(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdCommand", reflect.TypeOf((*MockTodoComandService)(nil).FindByIdCommand), todo)
}

// UpdateTodoCommand mocks base method.
func (m *MockTodoComandService) UpdateTodoCommand(todo app.TodoData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoCommand", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoCommand indicates an expected call of UpdateTodoCommand.
func (mr *MockTodoComandServiceMockRecorder) UpdateTodoCommand(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoCommand", reflect.TypeOf((*MockTodoComandService)(nil).UpdateTodoCommand), todo)
}
