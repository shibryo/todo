// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go
//
// Generated by this command:
//
//	mockgen -source=timer.go -destination=mock/timer.go -package=model_mock
//

// Package model_mock is a generated GoMock package.
package model_mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockModelTimer is a mock of ModelTimer interface.
type MockModelTimer struct {
	ctrl     *gomock.Controller
	recorder *MockModelTimerMockRecorder
}

// MockModelTimerMockRecorder is the mock recorder for MockModelTimer.
type MockModelTimerMockRecorder struct {
	mock *MockModelTimer
}

// NewMockModelTimer creates a new mock instance.
func NewMockModelTimer(ctrl *gomock.Controller) *MockModelTimer {
	mock := &MockModelTimer{ctrl: ctrl}
	mock.recorder = &MockModelTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelTimer) EXPECT() *MockModelTimerMockRecorder {
	return m.recorder
}

// AsGoString mocks base method.
func (m *MockModelTimer) AsGoString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsGoString")
	ret0, _ := ret[0].(string)
	return ret0
}

// AsGoString indicates an expected call of AsGoString.
func (mr *MockModelTimerMockRecorder) AsGoString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsGoString", reflect.TypeOf((*MockModelTimer)(nil).AsGoString))
}

// AsGoTime mocks base method.
func (m *MockModelTimer) AsGoTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsGoTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// AsGoTime indicates an expected call of AsGoTime.
func (mr *MockModelTimerMockRecorder) AsGoTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsGoTime", reflect.TypeOf((*MockModelTimer)(nil).AsGoTime))
}
