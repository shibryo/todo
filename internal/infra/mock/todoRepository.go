// Code generated by MockGen. DO NOT EDIT.
// Source: todoRepository.go
//
// Generated by this command:
//
//	mockgen -source=todoRepository.go -destination=mock/todoRepository.go -package=app_mock
//

// Package app_mock is a generated GoMock package.
package app_mock

import (
	reflect "reflect"
	domain "todo/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTodoRepositorier is a mock of TodoRepositorier interface.
type MockTodoRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositorierMockRecorder
}

// MockTodoRepositorierMockRecorder is the mock recorder for MockTodoRepositorier.
type MockTodoRepositorierMockRecorder struct {
	mock *MockTodoRepositorier
}

// NewMockTodoRepositorier creates a new mock instance.
func NewMockTodoRepositorier(ctrl *gomock.Controller) *MockTodoRepositorier {
	mock := &MockTodoRepositorier{ctrl: ctrl}
	mock.recorder = &MockTodoRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepositorier) EXPECT() *MockTodoRepositorierMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoRepositorier) Create(todoModel *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", todoModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoRepositorierMockRecorder) Create(todoModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoRepositorier)(nil).Create), todoModel)
}

// Delete mocks base method.
func (m *MockTodoRepositorier) Delete(todoModel *domain.DeletableTodo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", todoModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoRepositorierMockRecorder) Delete(todoModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoRepositorier)(nil).Delete), todoModel)
}

// FindAll mocks base method.
func (m *MockTodoRepositorier) FindAll() ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTodoRepositorierMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTodoRepositorier)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockTodoRepositorier) FindByID(id uint64) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTodoRepositorierMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTodoRepositorier)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockTodoRepositorier) Update(todoModel *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", todoModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoRepositorierMockRecorder) Update(todoModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoRepositorier)(nil).Update), todoModel)
}
